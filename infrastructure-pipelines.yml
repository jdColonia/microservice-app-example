# =======================================================
# CONFIGURACIÓN BÁSICA DEL PIPELINE DE INFRAESTRUCTURA
# =======================================================

# Este pipeline se ejecutará automáticamente cuando:
# - Se realicen cambios en la rama 'main'
# - Y los cambios afecten archivos dentro del directorio 'terraform/'
trigger:
  branches:
    include:
      - main
  paths:
    include:
      - 'terraform/**'

# Variables reutilizables a lo largo del pipeline
variables:
  - name: 'terraformDirectory'
    value: 'terraform' # Carpeta donde están los archivos .tf
  - name: 'azureServiceConnection'
    value: 'TfConnection' # Nombre del servicio de conexión a Azure configurado en Azure DevOps

stages:
# ==============================================
# ETAPA 1: VALIDACIÓN DE INFRAESTRUCTURA
# ==============================================
- stage: Validate
  displayName: '1. Validación de Infraestructura'
  jobs:
  - job: Validate
    displayName: 'Validar configuración Terraform'
    pool:
      vmImage: 'ubuntu-latest' # Agente de ejecución (máquina virtual en la nube)

    steps:
    # Paso 1: Instalar la versión especificada de Terraform
    - task: TerraformInstaller@1
      displayName: 'Instalar Terraform'
      inputs:
        terraformVersion: 'latest'
        
    # Paso 2: Inicializar Terraform
    - task: TerraformTaskV4@4
      displayName: 'Inicializar Terraform (estado local)'
      inputs:
        provider: 'azurerm'
        command: 'init'
        workingDirectory: $(terraformDirectory)
        commandOptions: '-reconfigure'

    # Paso 3: Validar la sintaxis de los archivos Terraform
    - task: TerraformTaskV4@4
      displayName: 'Validar sintaxis Terraform'
      inputs:
        provider: 'azurerm'
        command: 'validate'
        workingDirectory: $(terraformDirectory)

    # Paso 4: Generar el plan de ejecución
    # - Muestra los cambios que se aplicarían sin ejecutarlos
    # - Guarda el plan como archivo binario `tfplan`
    - task: TerraformTaskV4@4
      displayName: 'Generar plan de ejecución (con salida)'
      inputs:
        provider: 'azurerm'
        command: 'plan'
        workingDirectory: $(terraformDirectory)
        environmentServiceNameAzureRM: $(azureServiceConnection)
        commandOptions: '-out=tfplan' # Guarda el plan en archivo

    # Paso 5: Publicar el archivo tfplan como artefacto del pipeline
    # - Esto permite usar el mismo plan en la siguiente etapa
    - publish: $(terraformDirectory)/tfplan
      artifact: terraformPlan


# ==============================================
# ETAPA 2: APLICACIÓN DE CAMBIOS EN AZURE
# ==============================================
- stage: Apply
  displayName: '2. Aplicar Infraestructura'
  dependsOn: Validate # Solo se ejecuta si la etapa de validación fue exitosa
  condition: succeeded()

  jobs:
  - deployment: Deploy
    displayName: 'Aplicar cambios en Azure'
    pool:
      vmImage: 'ubuntu-latest' # Agente de ejecución

    strategy:
      runOnce: # Ejecutar una sola vez (despliegue simple)
        deploy:
          steps:
          # Paso 1: Instalar Terraform otra vez (cada job es independiente)
          - task: TerraformInstaller@1
            displayName: 'Instalar Terraform'
            inputs:
              terraformVersion: 'latest'

          # Paso 2: Inicializar Terraform en esta etapa también
          - task: TerraformTaskV4@4
            displayName: 'Inicializar Terraform'
            inputs:
              provider: 'azurerm'
              command: 'init'
              workingDirectory: $(terraformDirectory)
              commandOptions: '-reconfigure'

          # Paso 3: Descargar el artefacto tfplan generado anteriormente
          - download: current
            artifact: terraformPlan

          # Paso 4: Aplicar la infraestructura usando el archivo de plan
          - task: TerraformTaskV4@4
            displayName: 'Aplicar configuración (desde plan)'
            inputs:
              provider: 'azurerm'
              command: 'apply'
              workingDirectory: $(terraformDirectory)
              environmentServiceNameAzureRM: $(azureServiceConnection)
              commandOptions: 'tfplan' # Usa el archivo generado en la etapa Validate
