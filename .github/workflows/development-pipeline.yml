name: Development Pipeline

# =======================================================
# CONFIGURACIÓN BÁSICA DEL PIPELINE DE DESARROLLO
# =======================================================
# Este pipeline se ejecutará automáticamente cuando:
# - Se hagan cambios en la rama 'master' en directorios específicos (código de microservicios)
# - O cuando se complete exitosamente el pipeline de infraestructura (primera vez)
on:
  push:
    branches:
      - master
    paths:
      - 'auth-api/**'
      - 'frontend/**'
      - 'log-message-processor/**'
      - 'todos-api/**'
      - 'users-api/**'

  workflow_run:
    workflows: ['Infrastructure Pipeline']
    types:
      - completed # Solo cuando se completa el pipeline de infraestructura

# Variables reutilizables a lo largo del workflow
env:
  ACR_NAME: 'gacomicroserviceappacr.azurecr.io' # Nombre completo del Azure Container Registry (ACR)
  RESOURCE_GROUP: 'microservice-app-rg' # Grupo de recursos de Azure donde están desplegadas las Container Apps
  AZURE_CREDENTIALS: ${{ secrets.AZURE_CREDENTIALS_COLONIA }} # Credenciales de Azure configuradas en GitHub Secrets
  AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID_COLONIA }} # ID de la suscripción de Azure configuradas en GitHub Secrets

jobs:
  # ==============================================
  # ETAPA 1: BUILD Y DEPLOY DE MICROSERVICIOS
  # ==============================================
  build_and_deploy:
    name: '1. Build y Deploy de Microservicios'
    runs-on: ubuntu-latest # Agente de ejecución (máquina virtual en la nube)

    steps:
      # Paso 1: Clonar el repositorio en el runner
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Clona todo el historial

      # Paso 2: Autenticarse en Azure con las credenciales del secreto
      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ env.AZURE_CREDENTIALS }}

      # Paso 3: Verificar que el grupo de recursos existe antes de continuar
      - name: Verificar si el grupo de recursos existe
        run: |
          echo "Verificando existencia del grupo de recursos..."
          if ! az group exists --name $RESOURCE_GROUP --subscription $AZURE_SUBSCRIPTION_ID | grep true; then
            echo "❌ El grupo de recursos no existe. Abortando ejecución del pipeline."
            exit 1
          fi
          echo "✅ El grupo de recursos existe."

      # Paso 4: Login al Azure Container Registry
      - name: Login al Azure Container Registry (ACR)
        run: |
          az acr login --name ${ACR_NAME%%.*}

      # ===================================================
      # CASO 1: Push inicial después de infraestructura
      # ===================================================
      # Paso 5: Si el pipeline fue disparado por workflow_run, construir y desplegar todos los servicios
      - name: Push inicial de todas las imágenes
        if: github.event_name == 'workflow_run' && github.event.workflow_run.conclusion == 'success'
        run: |
          timestamp=$(date +%Y%m%d%H%M%S)
          for SERVICE in auth-api frontend log-message-processor todos-api users-api prometheus; do
            echo "🔧 Construyendo imagen para $SERVICE..."
            docker build -t $ACR_NAME/$SERVICE:latest -t $ACR_NAME/$SERVICE:$timestamp ./$SERVICE
            docker push $ACR_NAME/$SERVICE:latest
            docker push $ACR_NAME/$SERVICE:$timestamp

            echo "🚀 Desplegando $SERVICE en Azure..."
            az containerapp update \
              --name $SERVICE \
              --resource-group $RESOURCE_GROUP \
              --image $ACR_NAME/$SERVICE:latest \
              --subscription $AZURE_SUBSCRIPTION_ID

            echo "⛓️ Configurando componente Dapr en $SERVICE..."
            az containerapp dapr component set \
              --name $SERVICE \
              --resource-group $RESOURCE_GROUP \
              --yaml ./dapr/components/resiliencia-http.yaml \
              --subscription $AZURE_SUBSCRIPTION_ID
            echo "✅ $SERVICE actualizado"
            echo "-------------------------------------------"
          done

      # ===================================================
      # CASO 2: Push normal a master → detectar cambios
      # ===================================================

      # Paso 5: Detectar cuáles microservicios tuvieron cambios
      - name: Detectar microservicios modificados
        if: github.event_name == 'push'
        id: detect
        run: |
          DETECTED=""
          for SERVICE in auth-api frontend log-message-processor todos-api users-api; do
            if git diff --name-only ${{ github.event.before }} ${{ github.sha }} | grep "^$SERVICE/"; then
              echo "📦 Cambios detectados en: $SERVICE"
              DETECTED="$DETECTED $SERVICE"
            fi
          done
          echo "detected_services=${DETECTED}" >> $GITHUB_OUTPUT

      # Paso 6: Construir y subir solo las imágenes modificadas
      - name: Construcción y publicación de imágenes modificadas
        if: github.event_name == 'push' && steps.detect.outputs.detected_services != ''
        run: |
          timestamp=$(date +%Y%m%d%H%M%S)
          for SERVICE in ${{ steps.detect.outputs.detected_services }}; do
            echo "🔧 Construyendo imagen para $SERVICE..."
            docker build -t $ACR_NAME/$SERVICE:latest -t $ACR_NAME/$SERVICE:$timestamp ./$SERVICE
            docker push $ACR_NAME/$SERVICE:latest
            docker push $ACR_NAME/$SERVICE:$timestamp
          done

      # Paso 7: Desplegar las imágenes modificadas en sus Container Apps
      - name: Despliegue de microservicios modificados
        if: github.event_name == 'push' && steps.detect.outputs.detected_services != ''
        run: |
          for SERVICE in ${{ steps.detect.outputs.detected_services }}; do
            echo "🚀 Desplegando $SERVICE en Azure..."
            az containerapp update \
              --name $SERVICE \
              --resource-group $RESOURCE_GROUP \
              --image $ACR_NAME/$SERVICE:latest \
              --subscription $AZURE_SUBSCRIPTION_ID

            az containerapp dapr component set \
              --name $SERVICE \
              --resource-group $RESOURCE_GROUP \
              --yaml ./dapr/components/resiliencia-http.yaml \
              --subscription $AZURE_SUBSCRIPTION_ID
            echo "✅ $SERVICE actualizado"
            echo "-------------------------------------------"
          done
