name: Setup Terraform Backend

# ========================================================================
# PIPELINE MANUAL PARA CREAR EL BACKEND DE INFRAESTRUCTURA EN AZURE
# ========================================================================

# Este pipeline se ejecuta manualmente desde la pestaña 'Actions' en GitHub
on:
  workflow_dispatch: # Activación manual
    inputs:
      resource_group:
        description: 'Nombre del grupo de recursos para el backend'
        required: true
        default: 'tfstate-rg'
        type: string
      location:
        description: 'Región de Azure donde crear los recursos'
        required: true
        default: 'eastus'
        type: string

# Variables reutilizables a lo largo del workflow
env:
  TERRAFORM_DIR: 'backend' # Carpeta donde están los archivos .tf
  AZURE_CREDENTIALS: ${{ secrets.AZURE_CREDENTIALS_COLONIA }} # Credenciales de Azure configuradas en GitHub Secrets
  AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID_COLONIA }} # Subscription ID de Azure configuradas en GitHub Secrets

jobs:
  # ==============================================
  # ETAPA 1: VALIDACIÓN DE INFRAESTRUCTURA
  # ==============================================
  validate:
    name: '1. Validación de Infraestructura'
    runs-on: ubuntu-latest

    steps:
      # Paso 1: Checkout del código
      - name: Checkout repository
        uses: actions/checkout@v4

      # Paso 2: Configurar Azure CLI
      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ env.AZURE_CREDENTIALS }}

      # Paso 3: Instalar Terraform
      - name: Install Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 'latest'

      # Paso 4: Inicializar Terraform con backend
      - name: Terraform Init
        run: |
          terraform init
        working-directory: ${{ env.TERRAFORM_DIR }}

      # Paso 5: Validar la sintaxis de los archivos Terraform
      - name: Terraform Validate
        run: terraform validate
        working-directory: ${{ env.TERRAFORM_DIR }}

      # Paso 6: Generar el plan de ejecución
      # - Muestra los cambios que se aplicarían sin ejecutarlos
      # - Guarda el plan como archivo binario `tfplan`
      - name: Terraform Plan
        run: |
          terraform plan -out=tfplan \
            -var="subscription_id=${{ env.AZURE_SUBSCRIPTION_ID }}" \
            -var="resource_group_name=${{ github.event.inputs.resource_group }}" \
            -var="location=${{ github.event.inputs.location }}"
        working-directory: ${{ env.TERRAFORM_DIR }}

      # Paso 7: Aplicar la infraestructura usando el archivo de plan
      - name: Terraform Apply
        run: terraform apply -input=false tfplan
        working-directory: ${{ env.TERRAFORM_DIR }}

      # Paso 8: Capturar outputs de Terraform y configurar variables de entorno
      - name: Capture Terraform Outputs
        run: |
          echo "RESOURCE_GROUP=$(terraform output -raw resource_group_name)" >> $GITHUB_ENV
          echo "STORAGE_ACCOUNT=$(terraform output -raw storage_account_name)" >> $GITHUB_ENV
          echo "CONTAINER_NAME=$(terraform output -raw container_name)" >> $GITHUB_ENV
          echo "STORAGE_KEY=$(terraform output -raw access_key)" >> $GITHUB_ENV
        working-directory: ${{ env.TERRAFORM_DIR }}

      # Paso 9: Actualizar Secrets en GitHub
      - name: Set GitHub Secrets (TF_STATE_*)
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }} # Token de Github
          GITHUB_REPOSITORY: 'MicroTodoSuite/microservice-app-ops' # Repositorio donde están los secrets
        run: |
          gh secret set TF_STATE_RESOURCE_GROUP -b "${{ env.RESOURCE_GROUP }}" --repo $GITHUB_REPOSITORY
          gh secret set TF_STATE_STORAGE_ACCOUNT -b "${{ env.STORAGE_ACCOUNT }}" --repo $GITHUB_REPOSITORY
          gh secret set TF_STATE_CONTAINER -b "${{ env.CONTAINER_NAME }}" --repo $GITHUB_REPOSITORY
          gh secret set TF_STATE_ACCESS_KEY -b "${{ env.STORAGE_KEY }}" --repo $GITHUB_REPOSITORY

      # Paso 9: Mostrar los Secrets de GitHub
      - name: Output backend configuration
        run: |
          echo "✅ Backend configurado correctamente"
          echo "=============================================================="
          echo "ℹ️ Información de los GitHub Secrets:"
          echo "TF_STATE_RESOURCE_GROUP: ${{ env.RESOURCE_GROUP }}"
          echo "TF_STATE_STORAGE_ACCOUNT: ${{ env.STORAGE_ACCOUNT }}"
          echo "TF_STATE_CONTAINER: ${{ env.CONTAINER_NAME }}"
          echo "⚠️ TF_STATE_ACCESS_KEY: [PROTEGIDO]"
          echo "=============================================================="
