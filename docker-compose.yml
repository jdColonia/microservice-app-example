services:
  zipkin:
    image: openzipkin/zipkin
    ports:
      - "9411:9411"
    expose:
      - 9411
    networks:
      - microservices-network

  redis:
    image: redis:7.0-alpine
    ports:
      - "6379:6379"
    networks:
      - microservices-network

  users-api:
    build: ./users-api
    ports:
      - "8083:8083"
    environment:
      - JWT_SECRET=PRFT
      - SERVER_PORT=8083
      - SPRING_PROFILES_ACTIVE=default
      - ZIPKIN_URL=http://zipkin:9411/
    expose:
      - 8083
    depends_on:
      - redis
    networks:
      - microservices-network

  auth-api:
    build: ./auth-api
    ports:
      - "8000:8000"
    environment:
      - JWT_SECRET=PRFT 
      - USERS_API_ADDRESS=http://users-api:8083 
      - AUTH_API_PORT=8000
      - ZIPKIN_URL=http://zipkin:9411/api/v2/spans
    expose:
      - 8000
    depends_on:
      - redis
      - users-api
    networks:
      - microservices-network

  todos-api:
    build: ./todos-api
    ports:
      - "8082:8082"
    environment:
      - JWT_SECRET=PRFT
      - TODO_API_PORT=8082
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_CHANNEL=log_channel
      - USERS_API_URL=http://users-api:8083
      - ZIPKIN_URL=http://zipkin:9411/api/v2/spans
    expose:
      - 8082
    depends_on:
      - redis
      - users-api
    networks:
      - microservices-network

  log-message-processor:
    build: ./log-message-processor
    environment:
      - PORT=8081
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_CHANNEL=log_channel
      - ZIPKIN_URL=http://zipkin:9411/api/v2/spans
    expose:
      - 8081
    depends_on:
      - redis
    networks:
      - microservices-network

  frontend:
    build: ./frontend
    ports:
      - "8080:8080"
    environment:
      - PORT=8080
      - AUTH_API_ADDRESS=http://auth-api:8000
      - TODOS_API_ADDRESS=http://todos-api:8082
      - ZIPKIN_URL=http://zipkin:9411/api/v2/spans
      - JWT_SECRET=PRFT
    expose:
      - 8080
    depends_on:
      - auth-api
      - todos-api
      - users-api
    networks:
      - microservices-network
  
  frontend-exporter:
    image: nginx/nginx-prometheus-exporter:latest
    command:
      - --nginx.scrape-uri=http://frontend:8080/nginx_status
    expose:
      - 9113 # Port where the exporter displays the metrics
    depends_on:
      - frontend
    networks:
      - microservices-network

  # Prometheus Service for monitoring
  prometheus:
    build:
      context: ./prometheus
    ports:
      - "9090:9090"
    environment:
      AUTH_API_TARGET: "auth-api:8000"
      USERS_API_TARGET: "users-api:8083"
      TODOS_API_TARGET: "todos-api:8082"
      LOG_PROCESSOR_TARGET: "log-message-processor:8081"
      FRONTEND_EXPORTER_TARGET: "frontend-exporter:9113"
    depends_on:
      - frontend
    networks:
      - microservices-network

  # Grafana Service for visualization
  grafana:
    image: grafana/grafana
    environment:
      - GF_SECURITY_ADMIN_USER=admin  
      - GF_SECURITY_ADMIN_PASSWORD=admin  
    ports:
      - "3000:3000"
    depends_on:
      - prometheus
    expose:
      - 3000
    networks:
      - microservices-network

networks:
  microservices-network:
    driver: bridge